generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  username              String                @unique
  password              String?               // Made optional for OAuth users
  role                  UserRole              @default(USER)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  switches              Switch[]
  shareableId           String                @unique @default(cuid())
  emailVerified         DateTime?
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  forceCurvePreferences ForceCurvePreference[]
  showForceCurves       Boolean               @default(true)
  manufacturers         Manufacturer[]
  accounts              Account[]
  forceCurveFeedback    ForceCurveFeedback[]
  submittedMasterSwitches MasterSwitch[]       @relation("SubmittedBy")
  approvedMasterSwitches  MasterSwitch[]       @relation("ApprovedBy")
  masterSwitchEdits       MasterSwitchEdit[]   @relation("EditedBy")
  approvedEdits           MasterSwitchEdit[]   @relation("ApprovedEditBy")
}

model Switch {
  id              String           @id @default(cuid())
  name            String
  chineseName     String?
  type            SwitchType?
  technology      SwitchTechnology?
  magnetOrientation String?
  magnetPosition  String?
  magnetPolarity  String?
  initialForce    Float?
  initialMagneticFlux Float?
  bottomOutMagneticFlux Float?
  pcbThickness    String?
  compatibility   String?
  springWeight    String?
  springLength    String?
  actuationForce  Float?
  bottomOutForce  Float?
  preTravel       Float?
  bottomOut       Float?
  manufacturer    String?
  notes           String?
  imageUrl        String?
  topHousing      String?
  bottomHousing   String?
  stem            String?
  frankenTop      String?
  frankenBottom   String?
  frankenStem     String?
  dateObtained    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Master switch relationship
  masterSwitchId  String?
  masterSwitch    MasterSwitch?    @relation(fields: [masterSwitchId], references: [id], onDelete: SetNull)
  isModified      Boolean          @default(false)
  modifiedFields  Json?            // Array of field names that were modified
  masterSwitchVersion Int?         // Version of the master switch this was based on
}

model Manufacturer {
  id          String   @id @default(cuid())
  name        String   @unique
  aliases     String[]
  verified    Boolean  @default(false)
  addedBy     String?
  user        User?    @relation(fields: [addedBy], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model ForceCurvePreference {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  switchName       String
  manufacturer     String?
  selectedFolder   String
  selectedUrl      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([userId, switchName, manufacturer])
}

model ForceCurveCache {
  id                 String   @id @default(cuid())
  switchName         String
  manufacturer       String?
  hasForceCurve      Boolean
  lastCheckedAt      DateTime @default(now())
  nextCheckAt        DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([switchName, manufacturer])
}

model ForceCurveFeedback {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  switchName         String
  manufacturer       String?
  incorrectMatch     String   // The folder name that was incorrectly matched
  feedbackType       String   // 'incorrect_match', 'no_match_found', 'suggest_match'
  suggestedMatch     String?  // User's suggested correct match (optional)
  notes              String?  // Additional notes from user
  createdAt          DateTime @default(now())
  
  @@index([switchName, manufacturer])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

enum SwitchType {
  LINEAR
  TACTILE
  CLICKY
  SILENT_LINEAR
  SILENT_TACTILE
}

enum SwitchTechnology {
  MECHANICAL
  OPTICAL
  MAGNETIC
  INDUCTIVE
  ELECTRO_CAPACITIVE
}

// Master Switch Database Models
model MasterSwitch {
  id                    String               @id @default(cuid())
  name                  String
  chineseName           String?
  type                  SwitchType?
  technology            SwitchTechnology?
  magnetOrientation     String?
  magnetPosition        String?
  magnetPolarity        String?
  initialForce          Float?
  initialMagneticFlux   Float?
  bottomOutMagneticFlux Float?
  pcbThickness          String?
  compatibility         String?
  springWeight          String?
  springLength          String?
  actuationForce        Float?
  bottomOutForce        Float?
  preTravel             Float?
  bottomOut             Float?
  manufacturer          String?
  notes                 String?
  imageUrl              String?
  topHousing            String?
  bottomHousing         String?
  stem                  String?
  frankenTop            String?
  frankenBottom         String?
  frankenStem           String?
  
  // Submission metadata
  submittedById         String
  submittedBy           User                 @relation("SubmittedBy", fields: [submittedById], references: [id])
  approvedById          String?
  approvedBy            User?                @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedAt            DateTime?
  status                MasterSwitchStatus   @default(PENDING)
  rejectionReason       String?
  version               Int                  @default(1)
  viewCount             Int                  @default(0)
  lastModifiedAt        DateTime             @default(now())
  originalSubmissionData Json?               // Store original submission for audit
  
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  
  // Relations
  userSwitches          Switch[]
  edits                 MasterSwitchEdit[]
  
  @@index([name, manufacturer])
  @@index([status])
  @@index([submittedById])
}

model MasterSwitchEdit {
  id                    String               @id @default(cuid())
  masterSwitchId        String
  masterSwitch          MasterSwitch         @relation(fields: [masterSwitchId], references: [id], onDelete: Cascade)
  editedById            String
  editedBy              User                 @relation("EditedBy", fields: [editedById], references: [id])
  previousData          Json                 // Store the entire previous state
  newData               Json                 // Store the proposed new state
  changedFields         Json                 // Array of field names that changed
  editedAt              DateTime             @default(now())
  approvedById          String?
  approvedBy            User?                @relation("ApprovedEditBy", fields: [approvedById], references: [id])
  status                MasterSwitchStatus   @default(PENDING)
  rejectionReason       String?
  
  @@index([masterSwitchId])
  @@index([editedById])
  @@index([status])
}

enum MasterSwitchStatus {
  PENDING
  APPROVED
  REJECTED
}