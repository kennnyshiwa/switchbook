generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  username                String                  @unique
  password                String?                 // Made optional for OAuth users
  role                    UserRole                @default(USER)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  shareableId             String                  @unique @default(cuid())
  emailVerified           DateTime?
  showForceCurves         Boolean                 @default(true)
  emailNotifications      Boolean                 @default(true)
  accounts                Account[]
  dismissedNotifications  DismissedNotification[]
  forceCurveFeedback      ForceCurveFeedback[]
  forceCurvePreferences   ForceCurvePreference[]
  manufacturers           Manufacturer[]
  approvedMasterSwitches  MasterSwitch[]          @relation("ApprovedBy")
  submittedMasterSwitches MasterSwitch[]          @relation("SubmittedBy")
  approvedEdits           MasterSwitchEdit[]      @relation("ApprovedEditBy")
  masterSwitchEdits       MasterSwitchEdit[]      @relation("EditedBy")
  notifications           Notification[]
  passwordResetTokens     PasswordResetToken[]
  switches                Switch[]
  verificationTokens      VerificationToken[]
}

model Switch {
  id                    String            @id @default(cuid())
  name                  String
  type                  SwitchType?
  springWeight          String?
  springLength          String?
  actuationForce        Float?
  bottomOutForce        Float?
  preTravel             Float?
  bottomOut             Float?
  manufacturer          String?
  notes                 String?
  imageUrl              String?
  topHousing            String?
  bottomHousing         String?
  stem                  String?
  dateObtained          DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  userId                String
  chineseName           String?
  compatibility         String?
  magnetOrientation     String?
  technology            SwitchTechnology?
  magnetPosition        String?
  initialForce          Float?
  initialMagneticFlux   Float?
  bottomOutMagneticFlux Float?
  pcbThickness          String?
  magnetPolarity        String?
  frankenBottom         String?
  frankenStem           String?
  frankenTop            String?
  isModified            Boolean           @default(false)
  masterSwitchId        String?
  masterSwitchVersion   Int?
  modifiedFields        Json?
  personalNotes         String?
  primaryImageId        String?
  masterSwitch          MasterSwitch?     @relation(fields: [masterSwitchId], references: [id])
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  images                SwitchImage[]
}

model Manufacturer {
  id        String   @id @default(cuid())
  name      String   @unique
  aliases   String[]
  verified  Boolean  @default(false)
  addedBy   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [addedBy], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ForceCurvePreference {
  id             String   @id @default(cuid())
  userId         String
  switchName     String
  manufacturer   String?
  selectedFolder String
  selectedUrl    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, switchName, manufacturer])
}

model ForceCurveCache {
  id            String    @id @default(cuid())
  switchName    String
  manufacturer  String?
  hasForceCurve Boolean
  lastCheckedAt DateTime  @default(now())
  nextCheckAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([switchName, manufacturer])
}

model ForceCurveFeedback {
  id             String   @id @default(cuid())
  userId         String
  switchName     String
  manufacturer   String?
  incorrectMatch String
  feedbackType   String
  suggestedMatch String?
  notes          String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([switchName, manufacturer])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model MasterSwitch {
  id                     String             @id @default(cuid())
  name                   String
  chineseName            String?
  type                   SwitchType?
  technology             SwitchTechnology?
  magnetOrientation      String?
  magnetPosition         String?
  magnetPolarity         String?
  initialForce           Float?
  initialMagneticFlux    Float?
  bottomOutMagneticFlux  Float?
  pcbThickness           String?
  compatibility          String?
  springWeight           String?
  springLength           String?
  actuationForce         Float?
  bottomOutForce         Float?
  preTravel              Float?
  bottomOut              Float?
  manufacturer           String?
  notes                  String?
  imageUrl               String?
  topHousing             String?
  bottomHousing          String?
  stem                   String?
  frankenTop             String?
  frankenBottom          String?
  frankenStem            String?
  submittedById          String
  approvedById           String?
  approvedAt             DateTime?
  status                 MasterSwitchStatus @default(PENDING)
  rejectionReason        String?
  version                Int                @default(1)
  viewCount              Int                @default(0)
  lastModifiedAt         DateTime           @default(now())
  originalSubmissionData Json?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  primaryImageId         String?
  approvedBy             User?              @relation("ApprovedBy", fields: [approvedById], references: [id])
  submittedBy            User               @relation("SubmittedBy", fields: [submittedById], references: [id])
  edits                  MasterSwitchEdit[]
  userSwitches           Switch[]
  images                 SwitchImage[]

  @@index([name, manufacturer])
  @@index([status])
  @@index([submittedById])
}

model MasterSwitchEdit {
  id              String             @id @default(cuid())
  masterSwitchId  String
  editedById      String
  previousData    Json
  newData         Json
  changedFields   Json
  editedAt        DateTime           @default(now())
  approvedById    String?
  status          MasterSwitchStatus @default(PENDING)
  rejectionReason String?
  approvedBy      User?              @relation("ApprovedEditBy", fields: [approvedById], references: [id])
  editedBy        User               @relation("EditedBy", fields: [editedById], references: [id])
  masterSwitch    MasterSwitch       @relation(fields: [masterSwitchId], references: [id], onDelete: Cascade)

  @@index([masterSwitchId])
  @@index([editedById])
  @@index([status])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  link      String?
  linkText  String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

model DismissedNotification {
  id                      String   @id @default(cuid())
  userId                  String
  type                    String
  dismissedAt             DateTime @default(now())
  lastMasterUpdateVersion Int?
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model SwitchImage {
  id             String        @id @default(cuid())
  switchId       String?
  masterSwitchId String?
  url            String
  type           ImageType     @default(UPLOADED)
  order          Int           @default(0)
  caption        String?
  width          Int?
  height         Int?
  size           Int?
  uploadedAt     DateTime      @default(now())
  masterSwitch   MasterSwitch? @relation(fields: [masterSwitchId], references: [id], onDelete: Cascade)
  switch         Switch?       @relation(fields: [switchId], references: [id], onDelete: Cascade)

  @@index([switchId])
  @@index([masterSwitchId])
  @@index([order])
}

enum UserRole {
  USER
  ADMIN
}

enum SwitchType {
  LINEAR
  TACTILE
  CLICKY
  SILENT_LINEAR
  SILENT_TACTILE
}

enum SwitchTechnology {
  MECHANICAL
  OPTICAL
  MAGNETIC
  INDUCTIVE
  ELECTRO_CAPACITIVE
}

enum MasterSwitchStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  SUBMISSION_APPROVED
  SUBMISSION_REJECTED
  EDIT_APPROVED
  EDIT_REJECTED
}

enum ImageType {
  UPLOADED
  LINKED
}
