generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  username              String                @unique
  password              String?               // Made optional for OAuth users
  role                  UserRole              @default(USER)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  switches              Switch[]
  shareableId           String                @unique @default(cuid())
  emailVerified         DateTime?
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  forceCurvePreferences ForceCurvePreference[]
  showForceCurves       Boolean               @default(true)
  manufacturers         Manufacturer[]
  accounts              Account[]
}

model Switch {
  id              String           @id @default(cuid())
  name            String
  chineseName     String?
  type            SwitchType?
  technology      SwitchTechnology?
  magnetOrientation String?
  magnetPosition  String?
  magnetStrength  Float?
  compatibility   String?
  springWeight    String?
  springLength    String?
  actuationForce  Float?
  bottomOutForce  Float?
  preTravel       Float?
  bottomOut       Float?
  manufacturer    String?
  notes           String?
  imageUrl        String?
  topHousing      String?
  bottomHousing   String?
  stem            String?
  dateObtained    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Manufacturer {
  id          String   @id @default(cuid())
  name        String   @unique
  aliases     String[]
  verified    Boolean  @default(false)
  addedBy     String?
  user        User?    @relation(fields: [addedBy], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model ForceCurvePreference {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  switchName       String
  manufacturer     String?
  selectedFolder   String
  selectedUrl      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([userId, switchName, manufacturer])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

enum SwitchType {
  LINEAR
  TACTILE
  CLICKY
  SILENT_LINEAR
  SILENT_TACTILE
}

enum SwitchTechnology {
  MECHANICAL
  OPTICAL
  MAGNETIC
  INDUCTIVE
  ELECTRO_CAPACITIVE
}